version: 2
jobs:
  build:
    docker: # use the docker executor type; machine and macos executors are also supported
      - image: circleci/node:7.10 # the primary container, where your job's commands are run

    working_directory: ~/ratify

    steps:
      - add_ssh_keys:
          fingerprints:
            - "0a:a2:37:b1:23:4a:46:d7:49:7d:b7:e6:40:6d:95:64"
      - checkout # check out the code in the project directory
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./firebase/functions/package.json" }}
          # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: cd firebase/functions && yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "./firebase/functions/package.json" }}

      # build!
      - run: cd firebase/functions && yarn run lint && yarn run build
  android:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/ratify

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "./android/build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "./android/build.gradle" }}
        
      # run bundle!
      - run: gradle :app:bundleDebug
workflows:
  version: 2
  build_all:
    jobs:
      - build
      - android



